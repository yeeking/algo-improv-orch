// ALGORITHMIC IMPROVISATION ORCHESTRA

// VERSION 0.1 OF THE MCP, NOW CALLED 'CONDUCTOR' SOFTWARE 
// A BASIC MESSAGE PROCESSING SERVER...

COMPILING IT
=========
cd src
./clean.sh
javac Conductor.java

RUNNING IT
=========
You start it like so:

cd src
java Conductor 8080 

OR

java Conductor 8080 network

where 8080 is the port you want it to listen on, and network tells it to accept messages from the network. Otherwise, 
it just accepts messages from localhost. 

CONFIGURING IT
==========
It can be configured to send and respond to different messages using the 
config file:

src/mcp.config

Each line of this file describes a message that the server sends and 
responds to, e.g.:

----
# message name,send interval,memory size,send size,random send/oldest send,max receive per cycle
clock,2000,0,0,0,10
change,20000,0,0,0,0
melody,4000,100,10,random,100
amp,4000,10,2,oldest,100
mood,5000,10,1,random,10


---- 

line 1 says send and respond to '/clock' messages, starting with a
send interval of 2 seconds. An improviser is only allowed to send 10
of these messages per cycle. 

A message from the conductor might look like this:

/clock 1000

A message to the conductor from an improviser might look like this:

/clock 8081 500

- 8081 is the port the sender is listening on, used to identify the sender
- 500 is the new send interval (and will also be the value sent out)

line 3 says:
- send and respond to '/melody' messages, starting with a send interval of 4 seconds
- store 100 values in memory in a FIFO stack
- send 5 values at a time, chosen randomly from the current 100
- on receiving /melody messages, add the new values to the end of the memory, losing oldest values.
- only allow agents to send 100 messages (or 100 numbers in total) per cycle.

A message from the conductor might look like this:
/melody 1224, 245, 63.7, 543, 750.24

A message to the conductor from an improviser might look like this:
/melody 8081, 123.414, 77.57

- this one would use 2 of the 'per cycle' count up. 



